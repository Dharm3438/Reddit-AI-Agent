["How to Handle Partial String Matches in Metadata Filtering for a RAG Application?$$How to Handle Partial String Matches in Metadata Filtering for a RAG Application?\nassuming you can extract \"Chris Nolan\" or \"Nolan\", your best bet is to have a tiny LLM generate 2-3 variants of that metadata value and then rerank the results after for relevance\n\nideally if your data is clean, you can have a simple prompt on the tiny LLM like \"give me the full name of the director with the correct format. Here are some examples: ...\"\n\nthat'll make sure it hits the relevant valueUse a proper search backend like Elasticsearch or Opensearch. You can combine custom queries (fuzzy matches etc.) with vector search easily. This illustrates the concept: https://docs.cloud.deepset.ai/docs/opensearch-queries-for-boosting-retrieval", "Agents: RAG search with tools using Metadata Filtering$$Agents: RAG search with tools using Metadata Filtering\nFrom the implementation of \\`VectorStoreRetriever\\`, the keyword arguments are passed in afresh on every call to the underlying vectorstore.  I haven't tried this, but I think if you saved a reference to the \\`search\\_kwargs\\` dictionary, you could mutate it before invoking the agent to get the behaviour you want.I would just rawdog a Pinecone vector store for thisYou could look up SelfQuery with LangChain. Basically you have the LLM apply the filter for you based on your query", "Open source RAG framework for building modular and production ready applications$$Open source RAG framework for building modular and production ready applications\nRead the\u00a0[Technical Blog](https://www.truefoundry.com/blog/cognita-building-an-open-source-modular-rag-applications-for-production)\u00a0to learn more about Cognita. More in the thread. \ud83e\uddf5"]