["How to start learning to code when you don't know where to start$$How to start learning to code when you don't know where to start\nWe made a [search engine](https://learn-anything.xyz/) to solve this exact problem.\n\nIt shows the best path for how to learn any topic on Earth in a linear way. [Here](https://learn-anything.xyz/programming) for example is the path to learning programming. \n\nOr if for example you want to learn python, you can do it [here](https://learn-anything.xyz/programming/programming_languages/python). \n\nJust search for what you want to learn. :)\n\nIf you think there is a better way to learn the topic, just click on the \ud83e\udd84 and say it.\n\nI hope you like it.I started learning on codeacademy, went to freecodecamp and then am now doing [edX's CS50](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x) (which is free).\n\n**I recommend that anyone starting to code start by watching the first lecture of CS50.** I didn't do this, but watching the first lecture got me really excited about coding even though I'd been doing it daily for 6 months and it also lays out concepts in a very easy-to-grasp way.\n\nIt also introduces you to a program called Scratch, which was designed for elementary school kids and does an amazing job at teaching someone the basic structure of code. \n[deleted]How to start?  \nRight now, yes, right in this browser and in this tab, press Ctrl+Shift+J buttons and type  \n    console.log(\"Hello World!\");  \nThis is it!Great post dudebroHow can I tell if coding is not for me? I mean for web/software development, not only as hobbySerious and a newbie question. Why php is hardly mentioned here? Isnt it good for a front and backend?Dude you don't even know how much you helped me. I really appreciate that. I will try to keep this type of work up for society by helping others in the community in whichever way I can. \nThank for help again. \nKeep up the good work. Is the link formatting messed up for anyone else? I see 50% of the links with the brackets and parenthesis The best way is to just forget about learning a certain language or framework, its the concepts that matter. I've seen this touched upon a few times on this thread, and i want to clarify exactly what I mean by the term \"concepts\", and list some.\n\nThe easiest way to describe a concept for me is by way of an analogy (Credit to which goes to my Boss). If you want to learn how to write a good story, you wouldn't particularly care about which language you learn, as the story would be the same independent of the language. Linking this to programming, a concept (in programming) would be an aspect of story writing that you can use in any story and any language, such as building dramatic tension or splitting it up into chapters. Most core programming concepts are 100% programming language independent and the sooner a dev appreciates this the better; whenever I hear something like \"Oh i've only ever writting in language X so everything in language Y is totally foreign to me\". In this scenario, its likely that the person stating this hasn't actually understood much of what they were writing, they just know how to do some things in some language.\n\nThat felt a little ranty, but its something i'm passionate about, here some concepts that any new or otherwise developer should be understanding (in rough order of where to start, and roughly grouped together). Also as a note there's no use learning a concept if you don't know why you'd use it, so try to focus on how and why you might need to use and combine concepts to do something more complicated.\n\nVariables, (Simple) Types (e.g. numbers, booleans, strings), Operators, Statements vs Expressions, Order of Precedence, Keywords & Why Syntax is important. Static/dynamic/strong/weak/blah typing and why the type system that the language of your choice uses matters and how you can use it.\n\nSelection Statements: If Statement, Switch statement.\n\n=== If you've got to this point and you can't point out where an expression is used in an If Statement and what *type* of expression it is, you've misunderstood something ===\n\nArrays/Lists\n\nIteration Statements: while/do while statements, for loops\n\nBy this point, you've hopefully gained an intuitive idea of how program flow works, for example you would be able to simulate how a block of code using selections statements/iteration statements would execute WITHOUT RUNNING IT, and at any given time you'll know what the next *expression* to be evaluated will be\n\nMethods/Functions, parameters, passing by value or reference, return values, scope\n\nBy this point you've covered all of the core concepts that I can think of off the top of my head, there are likely much more. Once you've understood these start focusing on higher level concepts such as object oriented programming, functional programming.\n\nIf you're learning a language that makes use of reference types (C#, Java etc) perhaps the most important thing to appreciate when learning higher level concepts is that THE VALUE OF A REFERENCE TYPE IS A REFERENCE.\n\nOn the off chance anyone actually cares, I would suggest starting off screwing around learning all of the above concepts using C# and [LINQPad](https://www.linqpad.net/Download.aspx). The expression mode is excellent for understanding the difference between a statement and an expression and it is incredibly lightweight so you can get cracking without having to screw around downloading a huge IDE just to write hello world and give up.\n\n\n\n\n\nStep 1: Pick a language out of the following  \n    a.  Java  \n    b.  Javascript  \n    c.  Python  \n    d.  C++  \n    e.  C#  \n    f.   HTML5\n\nStep 2: Follow a tutorial for one of those languages, if you need help on that there's a wiki in the sidebar.  Start building with what you know **CODE EVERY DAY (this is the most important thing)**\n\nStep 3:  Get an idea and start to build, when you get stuck, google, refer back to your tutorial, search on here, stackoverflow, and other code sites for your specific language.  Never take someone's entire solution without understanding what every part of it does.  \n\nStep 4:  **repeat step 3** a couple dozen times.\n\nStep 5.  Go apply for a job.  \n\n\nNow in Java:\n\n    ArrayList <String> languageList = new ArrayList();\n    languageList.add(\"java\");\n    languageList.add(\"javascript\")'\n    languageList.add(\"Python\");\n    languageList.add(\"C++\");\n    languageList.add(\"C#\");\n    languageList.add(\"html5\");\n\n    Random RN = new Random();\n    int randomInt = RN.nextInt()%languageList.length();\n    String userLanguageChoice = languageList.get(randomInt);\n     \n    int userLevel = 1; \n    String userStatus = \"noob\";\n    while (userStatus.equals(\"noob\")) {\n        if(userLevel < 50){\n             System.out.println(\"Study more to level up\");\n             userLevel++; // this should probably be in an if statement  \n       }\n       else{\n           userStatus = \"noLongerNoobly\";\n       }\n    }\n\n    int projectsCompleted = 0;\n    while(projectsCompleted < 50){\n       codeEveryDay();\n       workHard();\n       learnHowToSearch();\n       writeYourOwnCode();\n       repeat();\n       projectsCompleted++;\n    }\n\nEdit:  please note that the above was done by sight and without use of an IDE -- that may or may not compile -- will definitely need some imports and a class.What would you recommend for someone who has some basic programming background (html) and understands basic programming logic and wants to create small indie games for Windows. Would it still be C#? Think like Stardew Valley, Prison Architect, Factorio, type of games.I want to create something to make my work go much much faster.\n\nI have zero experience.\n\nI essentially have to cut and paste multiple short paragraphs and a photo into a new email.  I work at a talent agency and I pitch clients to casting directors.\n\nEach email is the same:\n\nGREETING\n\nROLE 1 NAME\nACTOR 1's PITCH\nACTOR1's HEADSHOT\nACTOR 2's PITCH\nACTOR 2's HEADSHOT\n\nROLE 2 NAME\nETC ETC\n\nSIGN OFF\n\nI'm assuming I'd need something like Pythin could do this but I have no idea.  What I'd imagine making is basically a list of text inputs where I could type in the role name, then the actors names etc and it would compile all the information from some sort of database so I could just cut and past it into an email instead of doing each actor individually.\n\nAny help on where to start could be appreciated![deleted]I'm looking to start learning python then java. Anybody wanna learn together? I don't know how we would go about doing it but just message me and we'll figured something out I guess.Neat. I'd like to add that [Dive Into Python](http://www.diveintopython3.net) is great for beginners who want to choose Python as their weapon.\n\nGreat write-up!\"First do it, then do it right, then do it better\" Great post. I'll second the freeCodeCamp suggestion, I've been dabbling with their front-end exercises for the last couple of months and they're really fun and I feel like I've learned a lot. They also have gitter chat rooms where people are very helpful. [deleted]Do you have any alternative books/learning material from the c# book provided. When I glanced at the book it seemed to be all about creating a game. Where as I'm looking to go towards more design windows programs for companies. \n\nGreat post btw.My biggest problem is that i don't know why i want to learn programming. I don't have an app idea or a game idea. I want to work as a programmer, but don't know in which area. What's your view on SoloLearn to lean basics of coding?\n\nYou can learn basics of multiple languages with this application and some of the most important ones. I'm dabbling in Ruby, Python and JavaScript with zero experience, I don't expect to come out after finishing with the knowledge to create an app/website/game through this service and and I just want to become good enough to practice the coding challenges they offer. It's available for IOS/Android and they have computer/website app to practice the courses also, they make the leaning gamified but also very social with helpful tips from past users on every course materials. Thanks for the infoI would like to add that one should learn concepts before learning a specific language.Gold mine.Have you gone or know of someone who's gone to a coding bootcamp and benefited? Maybe not get a job after day one but even months down the road and felt it was from it? I have 3 in mind. Learn Academy, Hack Reactor, Origin Code Academy.\n\nI've been doing coursework\u200b for 8 months but feel that attending one would accelerate my learning, confidence and ability. [deleted]Serious question: how come most posts or comments I see here regarding backend development rarely mention Java / Scala ?Excellent post! Thank you so much!Great post, I'm a beginner who is taking programming classes and def ran into many of those problems (opinion instead of advice, language choice, not knowing all the terminology, when taking a Python course in college.  Beginning of course was easy once I got the hang of it, by it quickly got faster paced and difficult. I heard people use GitHub, what are peoples experience with it? And are there any free code academies people recommend ? Great advice.Commenting for use when I get all the way home. Wee wee wee.Bookmarked. Thank you!\n\nMy dad is a programmer so I knew more than the average Joe but I don't have much experience at all. Recently I started going through all of the programming courses on Khan Academy. They seem informative to me but what is the general consensus on KA and how far should I expect it to get me?\n\nEdit: Right now I'm learning JavaScript and I'm interested in web and game development. The Khan Academy courses seem to cater those fields as they teach mainly JS with some HTML and CSS. Is there a downside to JS? What you said above makes it seem like that's the most applicable language to know therefore the best to start with.This is AWESOME, I'm going to show anyone who's interested in programming.\n\nlowkey tho i just made this comment so it easier to reference!I would start by learning the different elements of computer code.  Don't worry about the syntax of any particular language just yet.  Learn what a variable is and the different types (integers, strings, etc...)  Then learn about different operators that operate on those variables.  Then there's loops, functions and arrays.  Once you understand these basics and a few others, as well as how and why these elements occur in all computer languages, you can pick a language and move on from there.  \n\nOnce you understand the basics of how programs work, you can get into the syntax.  It's like learning a foreign language.  First you need to understand what a verb is, a noun, an adjective, etc...  Then you can learn how that particular language puts them together.I love you, OP.[deleted]Great post! This ought to be stickied. Comment for later reference This is really informative. I plan to show it to a friend who is having a bit of trouble in the area. Any chance this post, if not already, could get flagged somewhere?This is awesome. I'm going to add this link to here on my blog. This is what I miss. Straight up great resources. www.codingafter30.comI love this! Thanks :D I'd also like to really emphasize on making gradual progress everyday in learning, AKA coding everyday. It's ok to skip a day or two in case of burnout, but always keep up the progress!check your local library to see if you can access lynda.com for free just by having a library cardI have a serious grudge against online courses for whatever language because *they don't teach programming.* They teach the syntax of a language. What I need is to learn how to think like a programmer. [This comment ](http://www.reddit.com/r/learnprogramming/comments/6fto5j/-/dil3315) is a perfect example: a real world problem that must be solved. How to judge what language is the best for this case? How to translate my needs into code? How to build an efficient alghoritm for this? THIS is what I need, not another extended rendition of Hello World.RemindMe! 8 hoursYou might want to that you can make Android apps in Kotlin. It's officially supported now.My problem has always been where do I put the code to run it?  No training I've come across, code academy etc, explains this. They teach how to code, but what do I do with the code to have it accomplish something?For those interested in game development your 'weapon' is C++.Is mobile development with C# and Xamarin a bad idea?I think the best way is to have the new learner build data structures, of course there's the syntax hoops they have to jump through first, but if you're building something you can visualize in 3D you're going to see how all the stuff fits together.  Count this as a vote to leave all those new fangled languages till later and built data structures in C or C++.Thanks! I was really looking for a post like this. MVP!How did the letters PHP manage to be left out of your entire essay? I mean, it's good advice and all, but PHP is one of the best server side languages there is.reminder to do thisWhat are your feelings on data science vs full stack development? Which is a more useful skill set and are they even that different? Do you think the boot camps are worth it?Keeping this FreeCodeCamp.com is great. I've been using it. It's fun, easy, and guides you every step of the way. And it actually *is* free. SaveSo java is only valid as an android language and ruby is a back end language?  I've seen ruby used more for devops tooling and java for back ends, maybe I'm out of the loop?  I am definitely a few JS frameworks behind, but who's not?I'm considering buying this:\nhttps://shop.popularmechanics.com/sales/the-ultimate-learn-to-code-2017-bundle?utm_source=popularmechanics.com&utm_medium=referral&utm_campaign=the-ultimate-learn-to-code-2017-bundle&utm_term=scsf-227812&utm_content=a0x1a000001slut\n\nis this worth it?  Also I just noticed the last 4 letters in that address say 'slut'Start with \n-#include <iostream>\nContinue from thereCool thanks!I've heard and seen everywhere that Python is language that you should start with, what is your opinion on that?I've been following the Odin Project for about a month now. currently taking the html & css material on codecademy. Its been really funAs someone learning... this is all so true. I spent the first 6 months of learning starting 7 different books, 3 websites and 4-5 video series without doing anything significant in that time. \n\nI think the best thing for someone starting is actually to get a good book for whatever language they learn and go for a beginner book... I found so many times that a lot of videos online don't really go into depth and you end up doing List<T> in a C# video after the first Hello World application. It might just be me, but it seems like quite a jump before you even go through understanding reference and value variables, understanding arrays properly... hell... understanding namespaces. \n\nA book has the advantage of being able to go through more depth a bit earlier. I enjoyed the Fundamentals for C# development free PDF... I'd probably recommend it to a lot of people just because it does hammer on the fundamentals for the first 10-11 chapters and it does give exercises for each chapter end so you can really work your way through it. \n\nI think a lot of these programs seem to lack that structure... But again, it might just be the way I'm used to studying so your experience might be different :) Same as I didn't like FCC that much, but after going through John Ducketts books on HTML/CSS and his JS book I felt a lot more comfortable working through the exercises.\n\nI feel that a lot of these courses and especially the C# Head First book, just kind of throw you into \"just do this worry about it later\" mentality and I feel that it does lead to a certain level of inadequacy later on. You will use Lists but not know why you might be using those instead of an array when you just want to hold 5 numbers and not change contents or not understand why your application is not returning what you expect it to return.\n\nNot to mention one of the biggest weaknesses I've seen in a lot of online programs being that they put very little focus on writing clean and maintainable code. I remember doing some java online tutorial for school a while back (in that period of starting 20 resources in 6 months) and I checked with a friend \"hey, whadaya think\" and he just replied - what's \"a\" in this context?; \"it's a VARIABLE! I thought you were a developer and knew what I wanted to say!\" or \"why did you not comment this method? why is this method going 3 things? why not split it up? why not explain what they do?\"\n\nAnd I couldn't answer a lot of the questions because I didn't know any better :)) I still don't :)) \n\nAgain, I don't want to harp on as I'm no developer by any stretch and I'm just now warming up on posting my first bit of program by the end of this month to get some code review done, but I feel that as someone who is struggling to find resources a lot of these don't cover those elements that help you structure code well.\n\nAnyways I'll get back to learning :) Thanks for all the resources!I would truly appreciate some more specific guidance on this topic. Foundation material is wonderful.\nThanks much How to start: just write some code. Pick a language, any language, and just start making stuff. Doesn't matter what.\n\nBetween Google, Stackexchange, Github, youtube, reddit, orielly, IRC, mailing lists, and the websites for the languages themselves, there's no shortage of help.\n\nJust write some code and when you get stuck, use the internet.Fantastic man. Thank you.Thank you for this post and all the awesome ressources How would you recommend I get all of the info I need to fully learn how to create some games in Unity or Unreal engine if all I can use are books because I'll have no internet or connection to the outside world for the next year? I'll be living in the middle of nowhere in a few weeks and basically all I'll be able to use are books, PDFs, and maybe whatever collection of YouTube videos and stuff I can download.\n\nAll of the reviews I've seen for Unreal and Unity are bad and say that they barely teach shit and that none of them are for beginners, nor do they walk you through making a single simple game start to finish.\n\nI'd love to be able to make a 2D platformer fighting game like Mega Man or something, maybe not as indepth with the weapons and armor yet, but know how to do it.\n\nI have plenty of money saved up for a new fast laptop, external HDD, and books. \n\nSo please, if you can, can you give me a list of game programming or general programming and maybe 2D/3D design and animation books, that if I bought this entire set of books, it and hard work would be all I need to make some complete video games start to finish with basically zero background in programming and a basic background in photoshop?Nice read. Commenting here to make sure I don't lose this thread. Thanks buddy. I'm happy to add you to Skype. I just need to remember my password :/ Thank you so much. It helped a lot\nJust wanted to do a quick plug for something that was posted here a few months back. Upskillcourses.com is a great tutorial that uses HTML, CSS, JavaScript, and Ruby on rails to show beginners what it looks like to develope front and back end. It also uses Bootstrap and walks you through the Git process. The instructor, Rob Dey, leads some of the best tutorials I have seen online, period. Excellent, thorough, explanations. I would HIGHLY recommend this to beginners like myself. I have attempted to learn development a couple of times in the last couple years but end up getting frustrated and then making excuses. This is a great starting point.This is very helpful thank you [deleted]do you think 30min a day is enought?!\n\ni started learning python with sololearn but with only 30min freetime a day... i dont feel like a progress at all...or that it will take years to do only a small project...\n\nalso is sololearn good?! at the moment they are only learning me syntax like ** string, 1, 1.0, etc.... but it doesnt really show how to use that syntax to code at all... i dont see how that syntax will help me write a program or a scriptThanks for sharing", "At 39, I just got an offer for my first software dev job!$$At 39, I just got an offer for my first software dev job!\nHey man. You just made my day. And it is 6am in my country now. Im 37 years old and start a month ago to study front end. And reading this make me feel motivated again. Thanks for sharing your history.Happy for you, but as a software engineer for 8 years I'm dreaming of becoming a salsa teacher considering the amount of time I'm spending in front of a pc :joy:I just landed my first gig at the beginning of the month at 31. Enjoy that cloud 9 feeling!Well done you! It's great to hear success stories like this. I am about to start a new role as Senior Software Engineer on 2nd August.\n\nSeriously though, if ANYONE needs a C# mentor I will gladly help. Please PM. I've been in this game for years.this is so inspirational. i'm 35 now, started learning python about 6 weeks now for a career change. congratulations on your new job![deleted]Great stuff, man. Congratulations!! Your portfolio looks great -- my only recommendation is to convert contact details into [a links](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a), and use the appropriate link type (mailto: for email, tel: for phone, etc). That way, clicking on one brings up the proper software and prefills the address!I'm happy for you, but please stop coding while you drive.Welcome to the club! I'm primarily a C coder so exist in a different realm but I'm just a touch holder than you though have been coding for most of my life. The real work doesn't start now, the real fun does along with the real frustrations. Work through the frustrations but remember what you're doing is fun and what a rare privilege it is to get to do what we do. I finished my masters in electrical engineering right after I turned 40 - never stop learning or evolving.\n\nIt's early and I'm already compiling so I did read quickly through most of your post, if not all of it, and I don't think I saw anything about change and configuration management but the dirty little secret of coding and the best tip I can give anyone is to comment liberally and learn and implement change and configuration practices from the beginning.Congrats! I\u2019m about halfway through the code academy open bootcamp, have been coding at night after work while trying to also take care of my newborn so the day seems so far away but this post gives me hope. It would be a career change for me as I\u2019ve already been working for several years and have a masters (not related) but refuse to give up. Cheers!Good job living the dream.  I got my first offer to become a developer twenty years ago, and turned them down, because I didn't want to work for a bunch of Scientologists.  After spending those 20 years doing IT bullshit I'd say that I made a mistake.  A year or two doing development at a top 50 website probably would have given me a much better career.  \n\nInstead I have to work all weekend because some stupid bitch opened the wrong email.  Fourth of July got lost one year because a tech decided to pull a second drive during a RAID rebuild.  I lost part of thanksgiving once because the security guards started robbing the office, not knowing that I'd put in cameras.  I lost sleep to microwave towers covered in freezing rain.  I watched C-beams glitter in the dark near the Tannh\u00e4user Gate. \n\nSo my hat is off to you and I wish you the best.  Hang in there, and who knows, maybe you'll cash in a ton of options and code for fun while you sail the Bahamas.[deleted]I was already motivated but this made me super motivated\n\n*Vergil intensifies*Can I ask what you're doing as a software developer?Wow, congratulations! This is encouraging to read. I just turned 30, working through freeCodeCamp hoping to land my first programming job soon. I'm doing projects and learning so much as I go. I do get stuck at times on the projects, but I've learned that framing a technical problem into a question in your mind and typing it into google usually takes you to the solution. I think I've found an efficient loop that helps me learn programming: build the project, google when stuck or when you need documentation, read how that solution works or read the searched up documentation. Coffee also helps. \ud83d\ude42\n\nThank you for writing this up. This encouraged me to work even harder to reach my goals.Congratulations! \n\nThis is so inspiring, I'm motivated to keep learning. \n\nI have learnt from your piece that to get hired, one needs to build stuff. That's the anthem of programming; build apps.Awesome, congratulations!Amazing, thank you so much for spending the time to write this up. I'm in the same boat and this article came in just at the right time. I created a programmable robotic arm and put the video up on YouTube for the world to see. I must have spent 4 months on that project and now I wanted to share with the world.I was scratching my head why you are so happy to get software dev job when you already have job to teach Salsa(Simple Actor Language System and Architecture) until I got to dancing part.KING! 36 here, struggling. I'll just follow this.Not even 18, seeing peers exceeding in coding really made me feel down thinking that I should've started when I was way younger but seeing this gave me motivation.Lets goooooCongratulations! I'm happy for you and thankful for the advice you left for us! I'm looking forward to following it and learning with and from you all in this community! Thanks and congrats once again!Congratulations! Seems like you've worked hard and it paid off, and it is great that you shared your story with the community :)nice! good job!You're the same age as me so it's great to know your story. What podcasts do you listen to that are coding related?\n\nI'm currently going through the edX stuff on Python. Yesterday I managed to complete the problem sets and it gave me a real buzz to nail it. But before that I was trying to play around with connecting to APIs and still can't work that out - maybe with those I am jumping ahead of myself, but the things I want to create involve connecting to APIs.Very nice! Congratulations!Thank you for sharing this \nI'm feeling motivated as a college student in Nigeria just started learning python few weeksSo inspirational aww that was heavy. Continue the good workCongratulations!\n\nHow did you decide what projects to work on while building your portfolio?My deepest respect for you! I love hard working people who are not street smart but genuinely self made! \u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\u2665\ufe0fBro, thank you.Great post and congrats on the success. You earned itThis is awesome! I am mechanical engineer who loves to code and did not know how to switch careers but this write up has made my day!I bet you drank gallons of cappuccino during all of those late nights spend coding and learning.  Your site looks great as well.Wwooohoo! \nSo happy for you stranger :) \nCongratulations and thanks for sharing !Inspiring! Congratulations mate!Jocko's Podcast - Thats all I need to know to smash that upvote button!!Do you feel that you needed to know how to do full stack app on a linux server to build ypur portfolio, or if you were provided a more \"codeable\" WordPress site that you would've used that?\n\nI find resumes to be abhorrent when demonstrating value and being an introvert I don't do YouTube well4am sessions... you defnitively smashed it, congrats!\n\nedit: one question then... how did you deal with sleep deprivation, if you ever felt it through this time?This is a gold mine of great foundational info for any developer at any stage of their career. Bookmark this!  \n\n\nHonestly, keeping up to date can sometimes be the hardest part. If you can keep up with the resources here, you'll grow quickly at your firm.Thank you for sharing this wonderful moment with us. I\u2019m so happy for you.\nStay healthy \ud83d\udc4dWow, some great resources in this post! Glad you're paying it forwardJust like most others have already said, honestly this is very inspiring to read, especially from a fellow Aussie which sometimes around our parts the opportunities just don\u2019t seem to apparent.\n\nAs you\u2019ve said and mentioned on a few other posts, getting up in the morning is probably the way to go,having 4 kids between 2-8 might draw some troubles with that.\n\nMy goal is towards proper data analysis,but your definitely right that coding at the end of the day doesn\u2019t seem to work well. After already working 8-10 hours (in a very mentally draining job problem solving), throwing kids in the mix, at the end of the day the brain isn\u2019t going to be running as well as it could.Awsome journey \ud83d\udc4c\ud83d\udc4c\ud83d\udc4cThanks for posting this - I\u2019ve seen a lot of \u201cI\u2019m 25, am I too old?\u201d posts that had me a little nervous. I\u2019m 34 years old, masters degree in math, some nontechnical QA experience, currently a stay-at-home-mom about to have a second kid. Hoping to learn programming and get a job once kids are school aged - which puts me at about 40 looking for a new career. Glad there\u2019s hope![deleted]Thanks for this! Will definitely save it for motivation!Congratulations bro! Love hearing stories like this. I changed careers lateish (30) but have been loving it and it was one of the best decisions I have made in my life!Hey, first of all congrats on the new job! This post is awesome. Quick question, you said it took one full stack application for you to be shortlisted for a job. What application was it? Is it on your portfolio? I'd love to check it out!Awesome! Definitely gives me hope :)) current going through the motions of learning react and oh boy do I get lost47 and just starting....Why is there a picture of a nurse? Anyway congratulations!!I love your story, man. Thank you for sharing. I'm currently 2 months into my coding journey (here's my post where I talk about the road traveled so far: [https://www.reddit.com/r/learnprogramming/comments/nwdw66/my\\_programming\\_journey\\_currently\\_taking\\_the\\_odin/](https://www.reddit.com/r/learnprogramming/comments/nwdw66/my_programming_journey_currently_taking_the_odin/)) and I love to hear from people like you who did what I'm doing: made a commitment and stuck with it.\n\nI totally understand how hard it is to work full-time and study full time\u2014especially when you're taking self-learning courses. I too have had to cycle my work load to the bare minimum while I put in the time to make progress in my dev journey. Knowing that people such as yourself have done it serves as further inspiration and proof to me that I can do it too.good luck!Thank u so much for this and congratulations btw!!Who's the lady in the pic? That's why I clicked!I'm 39, started studying Azure 4 months ago. Already unemployed for 2 years before taking this decision and having 2 more years is disheartening. Happy for you though.Holy crap man u really put in the work, totally deserve this! Best of luck!Really well written and structured, you also seem to have a really strong fit for communication. Just saying :)\n\n**edit** Also, congrats on your path so far. You really succeeded imho, by finding the one thing, that you can do, that gives you either peace and/or happiness. What a journey. :) Wish I had some of that.GreatThis is inspiring in itself! So happy for you dude! Hopefully one day I can say that I have been offered a role in something similar! Still learning and grinding.Congrats \ud83e\udd73 and thanks for the resources!This is very encouraging! I am close to that same age and am wanting to make that a switch to that side as well.  Currently I\u2019m on the ops side of IT maintaining infrastructure and such.  I don\u2019t know your experience with this but my only worry is that since I\u2019ve been in IT for awhile I\u2019ve got a pretty decent salary and I\u2019m worried making a career type switch I will lose that but can\u2019t really afford to. Did you have to deal with any income loss or changes like that?inspiringI'm 35 and started about 3 weeks ago. Thanks for sharing your story. Happily doing the 4am routine now \ud83d\ude00. But self doubt can get quite overwhelming at times. Found your article during one of those bouts.\n\nI am documenting my journey on [Twitter](https://twitter.com/CodeYourWings) and on my [blog](https://www.codeyourwings.com/blog/) as well to keep me on track.\n\nHappy to have found this article and enjoyed reading the comments section as well. Quite motivational!  \n\n\nCongratulations on your achievement!!You made my day. Thanks for motivation and  Congratulations :)A really Inspiring answer! Thanks!I realize you don't mention anything around algorithms and data structures. How come? Did your mentor told you to skip those?An inspiring story man, quit my job at as a bank manager at 31 and just started learning python with my wife. Life stories from people like you keep me running. Thanks man.I'm 25,and I have been confused for the longest time. But just reading this, has inspired me. Hopefully, one day I get to write this kind of essay too.", "Senior SWE locking down a project$$Senior SWE locking down a project\nwhen one person creates roadblocks for 10 - they need to have their boundaries set by upper management\n\n[https://www.youtube.com/watch?v=X0BqpiXIbW8&t=1130s&ab\\_channel=ThePrimeTime](https://www.youtube.com/watch?v=X0BqpiXIbW8&t=1130s&ab_channel=ThePrimeTime)\n\nAlso let me guess. This guy has no tests, writes no documentation, doesn't believe in Jira and IDEs (cause he makes no mistakes)?If that guy is allowed to cause this sort of damage without anyone intervening, I would say it won't be improved and you should find something else, on the other hand market might be tough now.My man, this is giving me \u201cTom is a genius\u201d vibes. Run. \nhttps://thedailywtf.com/articles/the-inner-json-effectWow, that sounds incredibly frustrating. It might be worth documenting these issues and bringing them up with higher management. Sometimes a fresh perspective can highlight inefficiencies.You should just give him an onnx or tensort file and have him develop the pre and post processing code.\n\nOr tell him his code is too slow and he needs to covert  everything into a dynamic computational graph.Ig not the algorithmic enjoyment but creating dependency on himself so that nobody can touch him \nEven they want to replace himPersonally, I would probably bounce over this.  Not even getting into the maintenance aspect of this (which is horrible). Having an engineering culture where someone is using a personal GitHub, and that is okay is wild.[removed]So he says everything in Python is too slow? How slow is too slow? Can he prove that the speedup by not using Python is worth it? At any rate, I don\u2019t think he cares.What he is doing is not SWE ... it is code slinging.  His judgement is poor.  I doubt his code is any good ... he has dunning krueger up the ass ... just bail.  If the company allows this kind of out of control unorthodoxed behavior the management has no clue ... you can't win and don't waste your time on the poltitics.I\u2019m more of a swe, but this guy sounds like a bad Swe and a real dinosaur.\nNo version control?!? Wtf?!? That\u2019s the bare minimum I expect of anyone I\u2019ve had to interview for a senior position.I would alert his boss immediately.   It even go straight to the top.   Writing custom code is not an asset.  It\u2019s a liability when tried and true solutions exist.  Good luck.  But sounds like a horrible situation.Show and tell directly talk to the managers and show them successful deployments use cases. Many companies have their technical blog. I like stitch fix / Uber \u2018s technical blogs. A proper software system engineering framework is needed there.Oh man, this was my first technical lead out of university. He was the reason I gave up on corporate world and started working as a consultant with startups.  Hell, from how you described him it might be the exact same guy. Are his initials A.L. by any chance, cause that would be hilarious (also tragic for you, but hilarious).You were hired to 'unstuck' the project, and you've discovered the main problem is political, not technical. \n\nYou can always jump, that's never off the table. If you don't have the interest or the skill set for a political battle over this, then that's your best option. \n\nIf you do want to fight it out, then the name of the game is isolating this guy in the eyes of management. \n\nYou need the managers to understand:\n\n- this chucklehead is acting as a single point of failure for the entire project. This is why none of their interventions have worked yet. \n\n- there are good, standardized design patterns for building and productionizing ML products nowadays that everyone uses, from startup to Amazon-scale companies. This guy has decided that those patterns aren't good enough for him, but haven't given any real reasons. He's optimizing for load for a system that isn't live, and can't get to live, purely because of his decisions. \n\n- the company IP is at HUUUUGE RISK right now because it's stored in his private github. \n\n- most companies that take on things like in-house ML products have a VP of Engineering or a CTO to make sure these sorts of mistakes don't happen.  This guy is an expert in coding, but he's not a SUBJECT MATTER EXPERT on this highly specialized topic, and as a result he's completely fucked up a bunch of easy decisions. \n\n- the other scientists on your team all point to his rules and decisions as the thing holding them back. If they need a second opinion, any consultant will tell them the same thing. \n\nThey dropped the ball by letting this guy have such influence over fundamental decisions here. \n\nOn the heels of all the evidence you provide showing this is true (documentation of industry-standard ways to do ML, and how different it is that this guy's choices, statements from the other scientists on the team, etc), you need to have a SOLUTION roadmap ready for them. \n\n\"I would remove him from the project ASAP. These parts of his work are salvageable if we dockerize them as microservices, these others need to be redone completely in python. It will take X months, but the result will be a DS team working at 100% efficiency instead of 20% efficiency. \n\nIf you implement every recommendation I give you ASAP, I would estimate you could have this project delivered by X, with an additional cost of $Y. \n\nOn the other hand, I see no way in which this program delivers and meets the stated goals at all in its current format.\"The guy is a genius. \ud83d\ude0aI would 100% quit over this. There\u2019s no Will from leadership to improve this and it\u2019s not worth the headache.\n\nDepending on your org, your only option is probably escalating to your CISO about the public GitHub and weaponize your security policy to either force your IT team to support Cpp (unlikely) or force him to work differently or be exited. At most companies security is a trump card. \n\nIf you get this wrong you could probably blow up your career at this company anyway so I\u2019d have the exit planned first.In a business environment, this is called job security.\n\nThis dude has successfully made himself irreplaceable and secured his future at the company for years to come.the truth is things will only get worse. get out while you can.\n\n  \ni see responses that mgmt should deal with this, they have not yet so why expect that to change?\n\ntake a step back and do a realistic evaluation of the situation.I would argue he is purposefully making workflows customized so he has more job security and salary leverage.\u00a0\n\n\u00a0Once someone like that gets their claws into a system, it is extremely difficult to remove them without significant damage to the end product in the interim.\u00a0\n\n\u00a0Either you take a chance and build things on your own secretly until you can take over his workflow or you look elsewhere would be my advice.\u00a0\n\n\u00a0We had a third-party contractor like that. I played nice and did not let him know that I was using his information to build a system that utilized more standardized skill sets. I was able to eventually remove the need for his services altogether once I completed rebuilding a copy of his system.if you care about the company bring it up with your manager if not just chill and come up with a backup plan imoGuess he would want to write Langchain and all utilities for LLM from scratch when there is a new Gen AI project.\nIf explaining to him didn't work, switching jobs seems more reasonable, given project might not be going forward and you might not be learning muchI recommend that you and your team collectively express your concerns to your immediate supervisor.\n\nMake sure your ducks are in a row before having this talk. Keep your comments focused on the work rather than the politics and personalities. \n\nHave in mind a preferred outcome. Maybe a prioritized list. \n\nBe mindful of your expectations. Are they realistic? Are they managed? Are they flexible especially if new information comes to light? Are you ready to hear answers you really don't like? (\"He's a rock star here to right a sinking ship. You're a worker bee. Figure out how to stay in your lane or get lost.\")\n\n(I worked at a software R&D lab in a support role. These kinds of issues were hashed out incrementally with a couple of squeaky wheels getting pushed out even though they just wanted to do their jobs and were technically correct.)What exactly is your project doing? You mention streaming in a post. But what exactly are you streaming?  You could take a really massive fear mongering approach to their workNormally corporate politics are difficult and seem irritating but you've given us an example that seems really straightforward.  It's ridiculous that this guy is allowed to do this, shouldn't be allowed to happen.Successful product requires a team. If there is no technical manager or project manager, I would rather find another jobMan its just so easier to buy any of the 3 big cloud and do work there. Most of the infra heavy lifting is taken care of by them so you can actually focus on solving the problemHe seems to not understand, while yes pure python control logic, like loops and if statements are comparatively slow to C, most of the code in your codebase is probably Numpy or pandas. \n\nIn that case, Numpy and pandas and other ML libraries use C++ as the bulk of the workload.\n\nAll the speed comparisons are dumb things like counting to a billion in a for loop. Completely unrealistic, and simply put python slander. \n\nPython is just a tool to tie together a bunch of c++ libraries in an easy to use way.This dude needs to be firedtell him that mojo existsThis is NOT normal. If I was his manager I'd probably fire him. You should leave if you can, it won't get better.I like your plan. I wish you success in it. I once interviewed with an SWE who said that Data Science was really just first-year statistics with window dressing. My response was to laugh, then say \"Oh, you're serious? Well, I guess I'll give you back your day.\" and I left.\n\nI will say that (f), in my organization if we had someone maintaining team code in a personal GitHub they'd have about 30 minutes to move that code to a company-managed GitHub and show that their personal no longer held the repo, or they'd be terminated for violation of security protocols. That 30 minutes would really be enough time to say \"Gee, so you don't read our policies. Here they are. Fix it now.\"\n\nI'll also note that Directors and above at my company, if they are terminated for violation of security protocols, they will forfeit their shares, options and severance.", "Why learning to program is tough$$Why learning to program is tough\nGood article!\n\nMaybe you could add 3 more items:\n\n+ **Programming requires determination.**\n\n   More than often enough you will be tempted to give up, but with determination you can push through these periods.\n+ **Programming requires effort and initiative.**\n\n  If you don't work hard, you will not progress. Your progress and achievements are entirely up to you. ~~Programming~~ *Learning to program* is definitely not for the lazy.\n+ **Programming requires a different approach to failure.**\n\n  We are trained to see failure as something negative, something we should avoid at all cost. Sure, in programming, failure should also be avoided, but will happen more than often. In programming, failure is not necessarily something negative as it is *gained experience* and in programming, experience is all that counts. It's equally important to know how not to do something as it is to know how to do something.\n\n**Edit:** rephrased \"Programming is definitely not for the lazy.\" to \"*Learning to program* is definitely not for the lazy.\"Your analogies are... imperfect. \n\nMotivation is not just a simple matter of path of least resistance. Diets often fail because people can't see gradual, incremental changes. Body composition changes are subtle and happen over realtively long term horizons. If you aren't prepared for this reality, then you lose motivation quickly.\n\nOn the other hand, it's much easier to get small, immediate victories when learning to program, provided you are not trying to learn by jumping into the middle of the language and fighting your way out. \n\nMicrosoft's visual languages and similar paradigms are great in the sense that you can put stuff on the screen immediately and then iterate on that. Then it becomes a matter of googling what the next challenge is, implementing it, and creating the next challenge. \n\nIn a similar vein, physical sports are often MORE complicated than coding. YEah, you can boil basketball to \"get the ball in the net\", but that's too simplistic to be a useful comparison. Learning to code and learning to be competent at a sport are comparable. And that can be very challenging. Imagine having only a hoop, and basketball, and a deadline of 3 months to be good enough to make the highschool basketball team. Even if you were in good shape physically, there are skills that have to be practiced and learned from muscle memory - that just takes time. You can't google your way out of not being able to take free-throws. \n\nThe points you make are good and reasonable, but they aren't the end of the story. For example, choosing a language can resolve many problems. If you download VS2015 Community and choose C# as your language, you can hit the ground running without all the garbage config issues you deal with using Java or Python. \n\nMany of the other problems are solved by not being over ambitious. Yeah, databases are hard. But no beginner in his or her right mind should even think about databases. \n\nProgramming is *daunting* because it seems alien, like a foreign language. But it's not really that bad. It's more like.. putting together IKEA furniture without instructions. At first, it's just a ton of trial and error. You aren't even sure you have all the tools you need. You stumble through the first dresser and it's wobbly and fragile, but the drawers open almost 75% of the way at least half the time!\n\nThen you try again, and you learn from the last time you tried. You have the allen key handy because you know you need it. You know to do the nails last because they're hard to remove if you make a mistake. And so on. What sucks for me as a beginner is thinking of something to work on, as you said, and finding help. I remember when I first started (I'm still a beginner but I mean like, \"Hello, World!\" level beginner), I was just a few weeks in and I asked a question on here that got downvoted to hell even though I got only positive responses (although some were more advanced, I didn't understand some).[deleted]your article doesn't really talk about learning how to program at all.\n\nyou focus entirely on learning languages, frameworks, tech stacks ...\n\nit's a common mistake for people to think \"learning java\" is equivalent to \"learning to program\"; it's not. that's like saying learning english is equivalent to learning linguistics.\n\nedit: your article, not you article.[deleted]It's hard to get help\nMostly because beginners have a tough time phrasing their questions, but also because people feel some beginners haven't Googled hard enough. This is why taking a class is often better because at least you can talk to the TA or the professor of the course, or other students. When you're left to your own devices, you can easily get stuck and frustrated.  \n\nHoly crap this. I get not wanting to spoonfeed, but dam.Oh, great, another soapbox speech about how it's the learner's fault that programming is hard, not that the pedagogy sucks. I'd really say that existent learning resources largely only teach programming at the most basic level, anything beyond that are learning materials that either deal with advanced topics, or read more like a great reference than a great learning tool (Dive into Python is terribly inadequate for learning to program, for example, but I see it recommended over and over again).\n\nExperienced programmers always complain that learners expect handholding like its a bad thing. \"You just need motivation read the docs just write code.\" But that's exactly what a learner needs -- a hand holder. Someone to show them prerequisite knowledge and how to use the tools (when to use the docs, how to find what you need in the docs, just knowing that you're looking for a function that takes type a and returns type b, and even what types you're even dealing with).\n\nWhen you teach a child to ride a bike, you don't just give a bike to them. You give them training wheels, you hold the seat and guide them, you keep them balanced when the training wheels come off. When you teach a college student calculus, you don't throw them Spivak or Apostol, you give them Thomas or Stewart and work through examples with them and a good deal of graduated exercises.\n\nIt's why most of us learn through tutorials or college -- it holds our hands. Problem with tutorials is it doesn't provide a coherent curriculum and tends to take on more basic topics, leaving gaps in understanding and limited expertise, and problem with college is lack of accessibility.\n\nThe only resource I've seen that seems to do the right thing that wasn't written in the 80s or 90s (usually, for learning pgrwmming, I recommend older books) is Free Code Camp. It has appropriate hand holding and graduated exercises up through \"real\" programming.Enjoyment and genuine interest can make up for a lack of discipline.  I can attest to that.  If learning programming is such an excruciating crawl through the mud, maybe it's not really for you.As someone who is still struggling with most of these issues, I would equate the process of learning to program to trying to learn, adapt, and live in a culture where you do not know the language, geography, basic etiquette, etc.\n\nBefore I started, I knew zero about programming, was a dumb jock most of my life, and loved to party. So for me, this analogy is accurate.\n\nThis is NOT like learning a hobby (ie fishing, basketball, etc.) again, IMO.\n\nI am learning to 1) take responsibility for my learning and not blame specific lessons, websites, programs, etc. for my struggles with programming and 2) to love failing.\n\ndeleted  ^^^^^^^^^^^^^^^^0.5121  [^^^What ^^^is ^^^this?](https://pastebin.com/FcrFs94k/17857)I'd argue from personal experience why learning to program is tough is because of the process of learning.\n\n For example when I spent time learning from websites such as codeacademy, freecodecamp, etc.  I didn't feel like I was learning. When trying to learn program, I felt like \"learning\" was this process where I look at an example of something, copy the example but change the name of the variable being manipulated, and move on.\n\nThe process feels like I'm copying and pasting rather than understanding anything.Learning to program is totally different to programming.\n\nThis is the problem I'm having right now. I just finished a two year course in software development, and I still can't code. \n\nIt was all so rushed through as many concepts as possible - here's some binary maths, here's some SQL, here's some web, here's a bullshit team project, this is a Java object, some UML, some UCD, some legal stuff, a bit of JUnit - and when it came to the final project I barely scraped through. And it was all command-line and crap because I couldn't learn how to use Swing in time.\n\nI tried to do some coding over the summer after I finished, and realised that everything was set up for me in college. Netbeans, etc. And it was all in Java. Everything. Whereas every open source project or whatever I'm into, is in C++, and has all *packaging* and stuff that I don't understand and everyone assumes you just know. \n\nWithout thenewboston, I'd have failed completely. Unfortunately, there's nothing really between that (and people like Derek Banas) and an actual product.\n\nNow I'm studying to be a software engineer, and it's crippling me. Luckily, most of the engineering-y stuff was quite simple - and fun when it wasn't - but coding was the biggest nightmare. I get sweats and panic when it's a coding project.\n\nWhen I was a kid, I was into magic, and I bought books on how to do tricks. I understand those tricks *backwards*, but I never got the hang of them. This is how it feels with coding. Due to time constraints with other classes, I'm not getting the time to practise, either. If I ever get round to writing something, I could probably analyse the hell out of it though...\n\nMy solution is to give all first-year students a free year, like the final year project but *first*, where they get mentored in a small game or app they want to make. *Then* the analysis and theory can be taught.Another thing to think about is that programming is not always about getting better, especially for people who need to learn programming for their job. Many people learn to program just to get something done for work, get something out of themselves artistically (gaming, music, design), or just as an obstacle to what they actually want (science, finance, business). \n\nProgramming as a discipline or a craft is much different than programming as a functional activity, and I think the distinction is important. Many people who program don't care about many of the things on your list. They will often choose the path of least resistance that gets the job done and functions how they want. An example often given is Excel spreadsheets, which is a form of programming that many non-programmers use everyday. It's easy because it wipes out much of the hang-ups that you write about, and because of this people don't see it as programming. That's why I would say that programming tools and the craft of programming is hard, but not really programming itself. Just a thought that your post brought to mind.What I've experienced, is that the clearer 'action plan' you have the easier it is to learn anything. Mine consists of finishing a particular edX course then moving on to data analytics, then participation in projects, teaching a friend while starting to create my own projects. Finally apply to jobs and eventually get a job.Computers are good at computing numbers. They compute. In fact, that's all they're good at. It cannot solve problems well, nor can it portray why there is a compile issue(beyond it failed to compute something). It only can tell the programmer there was an issue somewhere in its computation. More often than not, the computer is hiding a lot of information(often for good reason) that could help as well.\n\nIts hard to debug complex issues of multiple levels and angles when we hardly deal with such problems in day-to-day life(without actively pursuing it)\n\nIn order to encounter such problems you have to programme a lot. Then get to the more difficult issues that incur from programming a lot. Then making mistakes you get from programming a lot. Only then can you get debugging practice. And that debugging practice is necessary for programming.\n\nIn order to learn debugging, you have to be somewhat bad at programming and good at problem solving. In order to be good at programming, you need to be good at debugging and practice.\n\nIt kills your ego when you are consistently wrong. Its even worse when you don't learn or even know how to learn why you were wrong.\n\nWorse yet, if you seek help. It may not be the help you wanted, but barely needed to get you going. Despite the ego killing, programmers are often arrogant(understandably so) and don't help by explaining or walking through problem solving. Often \"x is the answer\" or \"you didn't study enough\" or \"simply read this essay\". Even after all that, your issue may be RELATED to how they answer, but will not necessarily apply; or will require a lot of inferring.\n\nSimply putting in the time isn't necessarily enough. Work smart and efficient, not hard and long. But... you may not know how to work smart/efficient. \n\nYou can't know what you don't know.\n\nIt takes a entirely different mindset that most of the population isn't tuned to. We're(by default) not used to communicating or critically thinking in the context of how computers work. We aren't really taught how to problem solve or to critically think.\n\nDespite how widespread software development is and how prominent it applies to the modern world, there really isn't *that* many around. And chances are they are simply too busy to help you(or pass knowledge indirectly), through some stackoverflow post or article. Often they'll keep it to themselves too(considering it is a business)\n\nMost people don't know multiple languages. Most people don't fully understand how a computer actually works. Most people aren't good at math as well as logic. Most people don't like or know how to problem solve. Most people don't think critically. Most people don't know where or even how to receive the help they need. Most people don't research far beyond the first page of a google search. Most people aren't willing to take a multi hour tutorial, in order to take a multi hour tutorial, in order to tackle a problem/project that DOESN'T have a multi hour level tutorial.> Each day people come in wondering which language they should pick, fearing the wrong choice will doom them to mediocrity when it's the inaction that's likely to cause problems.\n\nThis is definitely me right now. I've become very indecisive about this. I honestly feel like if I don't end up picking the \"right\" language now that I will be doomed and would also be wasting my time. Probably sounds crazy, but again, I'm just being honest about how I feel.\n\nI'll be going to school for CS in the Fall, but I'm currently working to become a Full-Stack Developer. I've already been working with the standard Front-End stuff (HTML/CSS/JS) for some time now, but I'm struggling to choose which Back-End language to start with (Ruby/Python/Node).The bold is how comments should be. Which are all I read. Which is the point so I'm pleased. Also the last paragraph,\n\n> In the end, I think it requires a discipline that few people have. And unlike, say, working out or dieting, you have to have smart discipline, and figure stuff out. If you get stuck, and can't get unstuck, then you better find someone else that's willing to help, or that's it.\n\nSo the upvote is yours.Thanks for taking the time out to write this up. I'm in the middle of getting a degree in computer science and another in computer engineering and I feel like a failure when I see others doing certain tasks so easily. Reading your post reminded me that I am very good at some aspects and just need to code more in others. We really do have to learn SO MANY different ways of coding. Then there are new libraries every other day. Now I am learning Android SDK instead of Eclipse. What'll be next? It's exciting AND frustrating.Great post OP.\n\nI'm about 2 semesters deep into doing Comp Sci pre-requisites, and unfortunately was not able to enroll for C++ after taking Java last semester. I surprisingly did very well in Java and passed with an A, but lately I haven't been able to work on small projects of my own from a combination of laziness and focusing on Trigonometry.\n\nI think a big one is **Keeping consistent with what you learned**; recently the only projects I've done was to make a one-class project that involves taking multiples of 3's and 5's up to 1000 and getting the total of each, and playing with the fibonnacci sequence. It's pretty disheartening to feel rusty with what you learned, so it's also a good point to practice and retain what you've already learned so you don't forget later.I've gotten into plenty of [heated arguments](https://www.reddit.com/r/learnprogramming/comments/42urli/when_you_know_the_basics_but_you_still_cant_code/) and debates with developers here, regarding my judgement of the industry, the arrogant attitude, and mostly because of the absence of a decent pedagogy in teaching beginners, such as myself, how to code.\n\nHaving said that, this is one of the best, most realistic posts I've come across here.   You covered pretty much everything that challenges beginners: abundance of discipline, absence of mentor help, tons of terminology (I'd add 3rd party apps), no clear path, documentation sucks, etc. \n\nThank you for acknowledging the challenges and not leaving with *\"you have Google and StackOverflow, quit bitchin'!\"*On my course, we mainly do web development or whatever's required to make rich Internet applications. I'm on the third year of my course and mainly all we've done is web - HTML, CSS, PHP, SQL, JS, jQuery, AJAX - but sometimes we'll randomly get given a module on C# or something for mobile applications. For my dissertation I've been given the sudden task of building an instant messenger, I have no fucking idea where to begin with that. For the past week I've been looking for tutorials or open source projects I can mould into my own.\n\nWhen I graduate though all I plan on doing is filling in my gaps of knowledge and learning just enough to say I can do what most web development job spec ask for. Right now I'm fairly confident in HTML, CSS, JavaScript, jQuery and a tiny bit of PHP even though I'm struggling with certain things like why it doesn't work in my documents despite them being PHP files. I'm useless at SQL and databeses because most of my education in that aspect has been \"Copy this brick of text and I'll tell you what each bit means on the next page\".\n\nIt's difficult and I don't even know where I'm at and how likely I am to get a job when I graduate.I'm new to programming. \nI've tried learning c# a few years back, and I was bored eventually and stepped back.\nAlthough I still had the eagerness  to know the trade.\n\nFast forward to a few months back, I tried again. This time with unity.\nSuddenly I'm eager to make my character shoot, so I sit for hours learning.\n\nSo I guess my 2 cents are to find a path that interest you, and not just learn it.Inspiring AF ! THANK YOU.For me, I learned because I found it fun.  It wasn't through some extreme force of determination or discipline.... i just wanted to do it and had fun while doing it.  Going to school definitely accelerated the learning, and brought me out of web development in to making full OO applications and games with classes, inheritance, etc. \n\nIf you find that you have to force yourself to learn it, or have to force yourself to sit at your computer to keep trying.... I dont know how effective that will be.  It's something I've been working at every day, not through some crazy force of will, but just because theres really nothing else i'd rather be doing.A lot of the newer, on-line coding schools/tutorials address most of these issues. They simplify coding so you just type in a browser -- no configuration. They teach you concepts in order so you don't try to do advanced things too early (an issue you didn't even mention.) They give you goals so you don't have to find your own goals.\n\nAll of this serves to help student motivation namely by not setting them up to fail.\n\nCode.org is the most obvious site that teaches with this style, but there are many others. I have to mention my own site which teaches coding: http://www.societygames.com/youcode/. It even has an online glossary to help with the terminology problem.Nice job. I'd add somewhere something about developing habits thoughtfully, because in the long run, habits trump discipline every time. Discipline is really only s short-term requirement and it's finite. Where can we put this so that __everyone__ that's starting to program can read it?Let me tell you that these lines sum what I am going through right now.\n\nSometimes I fell like I am going to give up...but why giving up?\n\nI believe that even if I know nothing even if I am just walking around in the dark I will learn eventually. If people know about programming is because it is doable and possible, and I love it...it is hard and sometimes i feel like crying lol I wish my best friend was a programmer, so we could share ideas... because help is so hard to find. \njust to give you an example, this semester is my first one writting c++..my homework hard 300lines in c++...I mean...am I suppose to write 300 lines like that?\n\nI love so much programming that I would work for FREE just to learn....WORK FOR FREE...literally...\n\nAt the end I just can not give up like that...\n\nI love reddit thought. This community is amazing and I have been learning a lot from you guys...maybe I can say YOU are my best friends now...\n\nI am going to spend the days reading and writing (copying code lol) and I will learn...in the future I am going to be the one teaching..\n\nGood Luck for the newbies out there> **It requires discipline**\n\nGonna have to disagree. I'm not the most disciplined person, but I can spend hours programming simply because I find it fun to do; and I find myself constantly searching for new things to learn about programming, again not because I'm very disciplined, but just because I like programming and find it interesting.I quite enjoy SQL. Perhaps you might too if you invest enough time in it.anyone have that blog post that's like a timeline of teaching yourself programming and it basically says when you first start out it's gonna be tough wrapping your head around new programmatic modes of thinking but eventually you get over that initial hurdle of basic programming concepts and you know your language and maybe you know enough to learn another language within the same paradigm but you still feel like you don't know enough to really do anything and then there's a potentially dangerous plateau where for a really long while you have absolutely no idea what you need to know or how to figure it out?There are some excellent points here, but I think this does not belong in /r/learnprogramming. \n\nMost of the items on your list have very little to do with learning programming. They are relevant to mature, professional developers, and to building enterprise applications.\n\nWhy is this an important distinction? Well, there are many jobs in IT which require a person to understand the basics of programming without requiring them to actually program. For example, a customer support engineer at a software company needs to understand how an API works, but not necessarily how to leverage that API to create new applications. When you look across the spectrum of IT jobs, a smattering of programming knowledge is very helpful to many occupations. And that's what this sub is all about - garnering a smattering of programming knowledge. \n\nAnd, while I agree with your take on the mess of standards in the industry, there is one place where you got it dead wrong. Learning how to program is easy, not hard. It's like learning how to play a sport. You learn the rules and you practice by doing. And, of course, you are awful when you first start.  So you choose a weak spot and you work on it until you get better. Very good post. Thanks! Or none of that has anything to do with it, as [some research](https://blog.codinghorror.com/separating-programming-sheep-from-non-programming-goats/) shows.I haven't used any but object databases are out there.I actually learned a lot more about programming when I started using a LaTeX editor that allowed simultaneous display of the source and the document.You think programming is hard? Try upper level physics/math. Configuration is a mess. This is a really big point... IMO Java seems to be the only language where configuration is not a mess... even python can be a mess sometimes with setting up virtualenv and things like version  3 vs 2 ... Nice post.  I've been working as a software engineer for around3 years now and still find programming tough.  It's not just the coding, it's everything else that goes along with it in particular.>Many people want to be in better shape. They either diet or exercise. In both cases, the task ahead is fairly simple. \n\nHa ha ha.  If it were so simple then studies would not be showing that even after participating in active attempts at weight loss, on average after a 5 year period, the average person would be back at 97% of their initial weight.\n\nhttp://ajcn.nutrition.org/content/74/5/579.full\n\n>When you're learning to play a sport, the sport has probably been played that way for decades if not longer. \n\nAt the professional level of anything, including sports, but also business, or the social and physical sciences, \"ways\" of doing things are constantly being changed and innovated because of the competition with other people to produce greater efficiency.  The competition exists because there is only so much money out there to PAY people to do something.  If you're playing baseball with the physique and the knowledge of an 1890s old timey league, you're not going to be making money to live off.  Likewise the same if all you know is Apple II BASIC.\n\nI'm just going to skip right to my tl;dr.\n\nNone of what you say is technically false, for programming.  What you fail to contextualize is that all of the same difficulties are true for most other fields *at the professional level,* which seems to be the level you're trying to make this claim for.\n\nI've had an assortment of careers in my life, from shitty fast food, to shitty tech support, to shitty programmer, to shitty photographer, and now to being a shitty historian/linguist.  Each time I get into a field thinking it'll be easy, I'm confronted with the insane scope of difficulty it takes to be a *professional* at it.  \n\nUltimately, all fields are difficult.  What actually makes programming EASIER than many others, is the pool of money they're willing to pay someone at a lower level, is significantly greater than many other fields.  \n\nBecause I can guarantee you that there are far more shitty programmers earning a somewhat liveable salary than there are shitty linguists with the concomitant level of effort.Which is why i was so fortunate to: grow up as a kid deleting system32's on my uncles desktop, be a video gaming addict since elementary school, and have at least some remote talent in math and art.\n\nwhich in turn was enough to get me motivated to make games on my own and accidentally end up learning programming.> and there's no good diagnostic tool to help you out\n\nWell all syntax problems are easily fixed by using a decent compiler/interpreter, or even a text editor with syntax highlighting or an IDE. For all other problems, there's the print function, stack traces if errors are thrown and lots of other good stuff that helps you find the bug.or because you are a man    \nmen do better with cron "]